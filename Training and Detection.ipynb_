{"cells":[{"cell_type":"markdown","metadata":{"id":"QUANWN3rpfC9"},"source":["# Подготовка модели, обучение и тестирование"]},{"cell_type":"markdown","metadata":{"id":"Un75hNW1ZQfM"},"source":["## 0. Организуем структуру проекта"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"146BB11JpfDA","executionInfo":{"status":"ok","timestamp":1650396233436,"user_tz":-180,"elapsed":323,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["import os\n"]},{"cell_type":"markdown","metadata":{"id":"Zrx799niZQfP"},"source":["### Имя модели и URL берем с сайта \n","https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"42hJEdo_pfDB","executionInfo":{"status":"ok","timestamp":1650396234386,"user_tz":-180,"elapsed":3,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["CUSTOM_MODEL_NAME = 'my_ssd_mobilenet' \n","PRETRAINED_MODEL_NAME = 'ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8'\n","PRETRAINED_MODEL_URL = 'http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz'\n","TF_RECORD_SCRIPT_NAME = 'generate_tfrecord.py'\n","LABEL_MAP_NAME = 'label_map.pbtxt'"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"hbPhYVy_pfDB","executionInfo":{"status":"ok","timestamp":1650396234386,"user_tz":-180,"elapsed":2,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# Словарь path поможет вдальнейшем для сокращения и удобочитаемости кода\n","paths = {\n","    'WORKSPACE_PATH': os.path.join('Tensorflow', 'workspace'),\n","    'SCRIPTS_PATH': os.path.join('Tensorflow','scripts'),\n","    'APIMODEL_PATH': os.path.join('Tensorflow','models'),\n","    'ANNOTATION_PATH': os.path.join('Tensorflow', 'workspace','annotations'),\n","    'IMAGE_PATH': os.path.join('Tensorflow', 'workspace','images'),\n","    'MODEL_PATH': os.path.join('Tensorflow', 'workspace','models'),\n","    'PRETRAINED_MODEL_PATH': os.path.join('Tensorflow', 'workspace','pre-trained-models'),\n","    'CHECKPOINT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME), \n","    'OUTPUT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'export'), \n","    'TFJS_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfjsexport'), \n","    'TFLITE_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfliteexport'), \n","    'PROTOC_PATH':os.path.join('Tensorflow','protoc')\n"," }"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"LwhWZMI0pfDC","executionInfo":{"status":"ok","timestamp":1650396234863,"user_tz":-180,"elapsed":1,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["files = {\n","    'PIPELINE_CONFIG':os.path.join('Tensorflow', 'workspace','models', CUSTOM_MODEL_NAME, 'pipeline.config'),\n","    'TF_RECORD_SCRIPT': os.path.join(paths['SCRIPTS_PATH'], TF_RECORD_SCRIPT_NAME), \n","    'LABELMAP': os.path.join(paths['ANNOTATION_PATH'], LABEL_MAP_NAME)\n","}"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"HR-TfDGrpfDC","executionInfo":{"status":"ok","timestamp":1650396235190,"user_tz":-180,"elapsed":2,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# Создаем все вышеуказанные пути если они еще не созданы\n","for path in paths.values():\n","    if not os.path.exists(path):\n","        if os.name == 'posix':\n","            !mkdir -p {path}\n","        if os.name == 'nt':\n","            !mkdir {path}"]},{"cell_type":"markdown","metadata":{"id":"OLU-rs_ipfDE"},"source":["## 1. Скачиваем модель из Tensorflow Model Zoo и устанавливаем ее"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"SatcUcqm1Ug7","executionInfo":{"status":"ok","timestamp":1650396236020,"user_tz":-180,"elapsed":1,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# https://www.tensorflow.org/install/source_windows"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"K-Cmz2edpfDE","scrolled":true,"executionInfo":{"status":"ok","timestamp":1650396236339,"user_tz":-180,"elapsed":1,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# Библиотека необходима в Windows для загрузки protobuf\n","if os.name=='nt':\n","    !pip install wget \n","    import wget"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1650396237136,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"iA1DIq5OpfDE"},"outputs":[],"source":["# Клонируем выбранные модели\n","if not os.path.exists(os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection')):\n","    !git clone https://github.com/tensorflow/models {paths['APIMODEL_PATH']}"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"rJjMHbnDs3Tv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650396247189,"user_tz":-180,"elapsed":10057,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"879a9196-adf7-45e2-e5e6-2e7cabbc948c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","protobuf-compiler is already the newest version (3.0.0-9.1ubuntu1).\n","0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.\n","Processing /content/Tensorflow/models/research\n","\u001b[33m  DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n","   pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\u001b[0m\n","Requirement already satisfied: avro-python3 in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (1.10.2)\n","Requirement already satisfied: apache-beam in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (2.37.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (7.1.2)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (4.2.6)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (3.2.2)\n","Requirement already satisfied: Cython in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (0.29.28)\n","Requirement already satisfied: contextlib2 in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (0.5.5)\n","Requirement already satisfied: tf-slim in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (1.1.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (1.15.0)\n","Requirement already satisfied: pycocotools in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (2.0.4)\n","Requirement already satisfied: lvis in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (0.5.3)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (1.4.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (1.3.5)\n","Requirement already satisfied: tf-models-official>=2.5.1 in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (2.8.0)\n","Requirement already satisfied: tensorflow_io in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (0.24.0)\n","Requirement already satisfied: keras in /usr/local/lib/python3.7/dist-packages (from object-detection==0.1) (2.8.0)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (0.1.96)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (1.21.6)\n","Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (4.1.2.30)\n","Requirement already satisfied: tensorflow-text~=2.8.0 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (2.8.1)\n","Requirement already satisfied: oauth2client in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (4.1.3)\n","Requirement already satisfied: gin-config in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (0.5.0)\n","Requirement already satisfied: tensorflow-model-optimization>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (0.7.2)\n","Requirement already satisfied: tensorflow-addons in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (0.16.1)\n","Requirement already satisfied: py-cpuinfo>=3.3.0 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (8.0.0)\n","Requirement already satisfied: tensorflow~=2.8.0 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (2.8.0)\n","Requirement already satisfied: tensorflow-datasets in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (4.0.1)\n","Requirement already satisfied: google-api-python-client>=1.6.7 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (1.12.11)\n","Requirement already satisfied: psutil>=5.4.3 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (5.4.8)\n","Requirement already satisfied: kaggle>=1.3.9 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (1.5.12)\n","Requirement already satisfied: tensorflow-hub>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (0.12.0)\n","Requirement already satisfied: pyyaml<6.0,>=5.1 in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (5.4.1)\n","Requirement already satisfied: sacrebleu in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (2.0.0)\n","Requirement already satisfied: seqeval in /usr/local/lib/python3.7/dist-packages (from tf-models-official>=2.5.1->object-detection==0.1) (1.2.2)\n","Requirement already satisfied: google-auth<3dev,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (1.35.0)\n","Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (0.0.4)\n","Requirement already satisfied: httplib2<1dev,>=0.15.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (0.17.4)\n","Requirement already satisfied: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (3.0.1)\n","Requirement already satisfied: google-api-core<3dev,>=1.21.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (1.31.5)\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (1.56.0)\n","Requirement already satisfied: protobuf>=3.12.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (3.20.0)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (57.4.0)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (2022.1)\n","Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (2.27.1)\n","Requirement already satisfied: packaging>=14.3 in /usr/local/lib/python3.7/dist-packages (from google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (21.3)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3dev,>=1.16.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (4.8)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3dev,>=1.16.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3dev,>=1.16.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (4.2.4)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (2.8.2)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.7/dist-packages (from kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (6.1.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (4.64.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (2021.10.8)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (1.24.3)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=14.3->google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (3.0.8)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3dev,>=1.16.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (0.4.8)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<3dev,>=1.21.0->google-api-python-client>=1.6.7->tf-models-official>=2.5.1->object-detection==0.1) (2.10)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.1.0)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (2.0)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.5.3)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.14.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.44.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.6.3)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.1.2)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (3.1.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (3.3.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (13.0.0)\n","Requirement already satisfied: tf-estimator-nightly==2.8.0.dev2021122109 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (2.8.0.dev2021122109)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.2.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.24.0)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (2.8.0)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.0.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (4.1.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.5.2)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.8.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (3.3.6)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.4.6)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.0.1)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (0.6.1)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (4.11.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (3.8.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow~=2.8.0->tf-models-official>=2.5.1->object-detection==0.1) (3.2.0)\n","Requirement already satisfied: dm-tree~=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-model-optimization>=0.4.1->tf-models-official>=2.5.1->object-detection==0.1) (0.1.7)\n","Requirement already satisfied: crcmod<2.0,>=1.7 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (1.7)\n","Requirement already satisfied: orjson<4.0 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (3.6.8)\n","Requirement already satisfied: pyarrow<7.0.0,>=0.15.1 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (6.0.1)\n","Requirement already satisfied: dill<0.3.2,>=0.3.1.1 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (0.3.1.1)\n","Requirement already satisfied: pymongo<4.0.0,>=3.8.0 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (3.12.3)\n","Requirement already satisfied: hdfs<3.0.0,>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (2.7.0)\n","Requirement already satisfied: cloudpickle<3,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (2.0.0)\n","Requirement already satisfied: proto-plus<2,>=1.7.1 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (1.20.3)\n","Requirement already satisfied: fastavro<2,>=0.23.6 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (1.4.10)\n","Requirement already satisfied: pydot<2,>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from apache-beam->object-detection==0.1) (1.3.0)\n","Requirement already satisfied: docopt in /usr/local/lib/python3.7/dist-packages (from hdfs<3.0.0,>=2.1.0->apache-beam->object-detection==0.1) (0.6.2)\n","Requirement already satisfied: kiwisolver>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from lvis->object-detection==0.1) (1.4.2)\n","Requirement already satisfied: cycler>=0.10.0 in /usr/local/lib/python3.7/dist-packages (from lvis->object-detection==0.1) (0.11.0)\n","Requirement already satisfied: opencv-python>=4.1.0.25 in /usr/local/lib/python3.7/dist-packages (from lvis->object-detection==0.1) (4.1.2.30)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.7/dist-packages (from python-slugify->kaggle>=1.3.9->tf-models-official>=2.5.1->object-detection==0.1) (1.3)\n","Requirement already satisfied: portalocker in /usr/local/lib/python3.7/dist-packages (from sacrebleu->tf-models-official>=2.5.1->object-detection==0.1) (2.4.0)\n","Requirement already satisfied: regex in /usr/local/lib/python3.7/dist-packages (from sacrebleu->tf-models-official>=2.5.1->object-detection==0.1) (2019.12.20)\n","Requirement already satisfied: tabulate>=0.8.9 in /usr/local/lib/python3.7/dist-packages (from sacrebleu->tf-models-official>=2.5.1->object-detection==0.1) (0.8.9)\n","Requirement already satisfied: colorama in /usr/local/lib/python3.7/dist-packages (from sacrebleu->tf-models-official>=2.5.1->object-detection==0.1) (0.4.4)\n","Requirement already satisfied: scikit-learn>=0.21.3 in /usr/local/lib/python3.7/dist-packages (from seqeval->tf-models-official>=2.5.1->object-detection==0.1) (1.0.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.21.3->seqeval->tf-models-official>=2.5.1->object-detection==0.1) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.21.3->seqeval->tf-models-official>=2.5.1->object-detection==0.1) (1.1.0)\n","Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons->tf-models-official>=2.5.1->object-detection==0.1) (2.7.1)\n","Requirement already satisfied: promise in /usr/local/lib/python3.7/dist-packages (from tensorflow-datasets->tf-models-official>=2.5.1->object-detection==0.1) (2.3)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from tensorflow-datasets->tf-models-official>=2.5.1->object-detection==0.1) (0.16.0)\n","Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tensorflow-datasets->tf-models-official>=2.5.1->object-detection==0.1) (1.7.0)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from tensorflow-datasets->tf-models-official>=2.5.1->object-detection==0.1) (5.7.0)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-datasets->tf-models-official>=2.5.1->object-detection==0.1) (21.4.0)\n","Building wheels for collected packages: object-detection\n","  Building wheel for object-detection (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for object-detection: filename=object_detection-0.1-py3-none-any.whl size=1690985 sha256=e4545b694f499f98465bbd51efaf7f8ea6e22b5ac209a7ed14be7dec2aafd161\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-bw5xivq5/wheels/a9/26/bf/1cb2313ed4855917889b97658bf0a19999e3588e47867bdaee\n","Successfully built object-detection\n","Installing collected packages: object-detection\n","  Attempting uninstall: object-detection\n","    Found existing installation: object-detection 0.1\n","    Uninstalling object-detection-0.1:\n","      Successfully uninstalled object-detection-0.1\n","Successfully installed object-detection-0.1\n"]}],"source":["# Устанавливаем Tensorflow Object Detection \n","# Библиотека позволяет дообучать предобученные модели\n","# Для коректной работы обучения необходим дополнительный модуль protobuf\n","if os.name=='posix':  \n","    !apt-get install protobuf-compiler\n","    !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && cp object_detection/packages/tf2/setup.py . && python -m pip install . \n","    \n","if os.name=='nt':\n","    if not os.path.exists(os.path.join(paths['PROTOC_PATH'], 'bin')):\n","        url=\"https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-win64.zip\"\n","        wget.download(url)\n","        !move protoc-3.15.6-win64.zip {paths['PROTOC_PATH']}\n","        !cd {paths['PROTOC_PATH']} && tar -xf protoc-3.15.6-win64.zip\n","        os.environ['PATH'] += os.pathsep + os.path.abspath(os.path.join(paths['PROTOC_PATH'], 'bin'))   \n","        !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && copy object_detection\\\\packages\\\\tf2\\\\setup.py setup.py && python setup.py build && python setup.py install\n","        !cd Tensorflow/models/research/slim && pip install -e . "]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35922,"status":"ok","timestamp":1650396283105,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"5yI5T2lI1Ug9","outputId":"b52ffc36-48f9-436c-91dd-5e2d1bf19093","scrolled":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Running tests under Python 3.7.13: /usr/bin/python3\n","[ RUN      ] ModelBuilderTF2Test.test_create_center_net_deepmac\n","2022-04-19 19:24:09.191774: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","W0419 19:24:09.434827 139902227502976 model_builder.py:1102] Building experimental DeepMAC meta-arch. Some features may be omitted.\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_center_net_deepmac): 1.42s\n","I0419 19:24:09.957825 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_center_net_deepmac): 1.42s\n","[       OK ] ModelBuilderTF2Test.test_create_center_net_deepmac\n","[ RUN      ] ModelBuilderTF2Test.test_create_center_net_model0 (customize_head_params=True)\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_center_net_model0 (customize_head_params=True)): 0.95s\n","I0419 19:24:10.904154 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_center_net_model0 (customize_head_params=True)): 0.95s\n","[       OK ] ModelBuilderTF2Test.test_create_center_net_model0 (customize_head_params=True)\n","[ RUN      ] ModelBuilderTF2Test.test_create_center_net_model1 (customize_head_params=False)\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_center_net_model1 (customize_head_params=False)): 0.56s\n","I0419 19:24:11.463167 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_center_net_model1 (customize_head_params=False)): 0.56s\n","[       OK ] ModelBuilderTF2Test.test_create_center_net_model1 (customize_head_params=False)\n","[ RUN      ] ModelBuilderTF2Test.test_create_center_net_model_from_keypoints\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_center_net_model_from_keypoints): 0.46s\n","I0419 19:24:11.928822 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_center_net_model_from_keypoints): 0.46s\n","[       OK ] ModelBuilderTF2Test.test_create_center_net_model_from_keypoints\n","[ RUN      ] ModelBuilderTF2Test.test_create_center_net_model_mobilenet\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_center_net_model_mobilenet): 3.27s\n","I0419 19:24:15.196572 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_center_net_model_mobilenet): 3.27s\n","[       OK ] ModelBuilderTF2Test.test_create_center_net_model_mobilenet\n","[ RUN      ] ModelBuilderTF2Test.test_create_experimental_model\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_experimental_model): 0.0s\n","I0419 19:24:15.197817 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_experimental_model): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_create_experimental_model\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature0 (True)\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature0 (True)): 0.06s\n","I0419 19:24:15.257625 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature0 (True)): 0.06s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature0 (True)\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature1 (False)\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature1 (False)): 0.04s\n","I0419 19:24:15.299575 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature1 (False)): 0.04s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_from_config_with_crop_feature1 (False)\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_model_from_config_with_example_miner\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_model_from_config_with_example_miner): 0.05s\n","I0419 19:24:15.347198 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_model_from_config_with_example_miner): 0.05s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_model_from_config_with_example_miner\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_with_matmul\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_with_matmul): 0.23s\n","I0419 19:24:15.582657 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_with_matmul): 0.23s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_with_matmul\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_without_matmul\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_without_matmul): 0.18s\n","I0419 19:24:15.766975 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_without_matmul): 0.18s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_faster_rcnn_without_matmul\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_with_matmul\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_with_matmul): 0.24s\n","I0419 19:24:16.005621 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_with_matmul): 0.24s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_with_matmul\n","[ RUN      ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_without_matmul\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_without_matmul): 0.24s\n","I0419 19:24:16.250897 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_without_matmul): 0.24s\n","[       OK ] ModelBuilderTF2Test.test_create_faster_rcnn_models_from_config_mask_rcnn_without_matmul\n","[ RUN      ] ModelBuilderTF2Test.test_create_rfcn_model_from_config\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_rfcn_model_from_config): 0.19s\n","I0419 19:24:16.446470 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_rfcn_model_from_config): 0.19s\n","[       OK ] ModelBuilderTF2Test.test_create_rfcn_model_from_config\n","[ RUN      ] ModelBuilderTF2Test.test_create_ssd_fpn_model_from_config\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_ssd_fpn_model_from_config): 0.05s\n","I0419 19:24:16.493247 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_ssd_fpn_model_from_config): 0.05s\n","[       OK ] ModelBuilderTF2Test.test_create_ssd_fpn_model_from_config\n","[ RUN      ] ModelBuilderTF2Test.test_create_ssd_models_from_config\n","I0419 19:24:16.844790 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b0\n","I0419 19:24:16.845046 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 64\n","I0419 19:24:16.845167 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 3\n","I0419 19:24:16.853706 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:16.879393 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:16.879575 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:16.991242 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:16.991486 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:17.239051 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:17.239284 139902227502976 efficientnet_model.py:144] round_filter input=40 output=40\n","I0419 19:24:17.550303 139902227502976 efficientnet_model.py:144] round_filter input=40 output=40\n","I0419 19:24:17.550564 139902227502976 efficientnet_model.py:144] round_filter input=80 output=80\n","I0419 19:24:18.026645 139902227502976 efficientnet_model.py:144] round_filter input=80 output=80\n","I0419 19:24:18.026886 139902227502976 efficientnet_model.py:144] round_filter input=112 output=112\n","I0419 19:24:18.466324 139902227502976 efficientnet_model.py:144] round_filter input=112 output=112\n","I0419 19:24:18.466583 139902227502976 efficientnet_model.py:144] round_filter input=192 output=192\n","I0419 19:24:19.343374 139902227502976 efficientnet_model.py:144] round_filter input=192 output=192\n","I0419 19:24:19.343628 139902227502976 efficientnet_model.py:144] round_filter input=320 output=320\n","I0419 19:24:19.492226 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=1280\n","I0419 19:24:19.538227 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.0, depth_coefficient=1.0, resolution=224, dropout_rate=0.2, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:19.643364 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b1\n","I0419 19:24:19.643585 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 88\n","I0419 19:24:19.643676 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 4\n","I0419 19:24:19.646298 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:19.684688 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:19.684848 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:19.923769 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:19.924007 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:20.328653 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:20.328875 139902227502976 efficientnet_model.py:144] round_filter input=40 output=40\n","I0419 19:24:20.738323 139902227502976 efficientnet_model.py:144] round_filter input=40 output=40\n","I0419 19:24:20.738588 139902227502976 efficientnet_model.py:144] round_filter input=80 output=80\n","I0419 19:24:21.274176 139902227502976 efficientnet_model.py:144] round_filter input=80 output=80\n","I0419 19:24:21.274393 139902227502976 efficientnet_model.py:144] round_filter input=112 output=112\n","I0419 19:24:21.858309 139902227502976 efficientnet_model.py:144] round_filter input=112 output=112\n","I0419 19:24:21.858554 139902227502976 efficientnet_model.py:144] round_filter input=192 output=192\n","I0419 19:24:22.510320 139902227502976 efficientnet_model.py:144] round_filter input=192 output=192\n","I0419 19:24:22.510515 139902227502976 efficientnet_model.py:144] round_filter input=320 output=320\n","I0419 19:24:22.655330 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=1280\n","I0419 19:24:22.683591 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.0, depth_coefficient=1.1, resolution=240, dropout_rate=0.2, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:22.742941 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b2\n","I0419 19:24:22.743081 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 112\n","I0419 19:24:22.743158 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 5\n","I0419 19:24:22.744677 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:22.758546 139902227502976 efficientnet_model.py:144] round_filter input=32 output=32\n","I0419 19:24:22.758657 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:22.884245 139902227502976 efficientnet_model.py:144] round_filter input=16 output=16\n","I0419 19:24:22.884444 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:23.128114 139902227502976 efficientnet_model.py:144] round_filter input=24 output=24\n","I0419 19:24:23.128291 139902227502976 efficientnet_model.py:144] round_filter input=40 output=48\n","I0419 19:24:23.355363 139902227502976 efficientnet_model.py:144] round_filter input=40 output=48\n","I0419 19:24:23.355552 139902227502976 efficientnet_model.py:144] round_filter input=80 output=88\n","I0419 19:24:23.660893 139902227502976 efficientnet_model.py:144] round_filter input=80 output=88\n","I0419 19:24:23.661102 139902227502976 efficientnet_model.py:144] round_filter input=112 output=120\n","I0419 19:24:23.955178 139902227502976 efficientnet_model.py:144] round_filter input=112 output=120\n","I0419 19:24:23.955348 139902227502976 efficientnet_model.py:144] round_filter input=192 output=208\n","I0419 19:24:24.322504 139902227502976 efficientnet_model.py:144] round_filter input=192 output=208\n","I0419 19:24:24.322713 139902227502976 efficientnet_model.py:144] round_filter input=320 output=352\n","I0419 19:24:24.475184 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=1408\n","I0419 19:24:24.503592 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.1, depth_coefficient=1.2, resolution=260, dropout_rate=0.3, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:24.568604 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b3\n","I0419 19:24:24.568744 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 160\n","I0419 19:24:24.568831 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 6\n","I0419 19:24:24.570353 139902227502976 efficientnet_model.py:144] round_filter input=32 output=40\n","I0419 19:24:24.585167 139902227502976 efficientnet_model.py:144] round_filter input=32 output=40\n","I0419 19:24:24.585289 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:24.907264 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:24.907459 139902227502976 efficientnet_model.py:144] round_filter input=24 output=32\n","I0419 19:24:25.125908 139902227502976 efficientnet_model.py:144] round_filter input=24 output=32\n","I0419 19:24:25.126086 139902227502976 efficientnet_model.py:144] round_filter input=40 output=48\n","I0419 19:24:25.341625 139902227502976 efficientnet_model.py:144] round_filter input=40 output=48\n","I0419 19:24:25.341803 139902227502976 efficientnet_model.py:144] round_filter input=80 output=96\n","I0419 19:24:25.715809 139902227502976 efficientnet_model.py:144] round_filter input=80 output=96\n","I0419 19:24:25.716003 139902227502976 efficientnet_model.py:144] round_filter input=112 output=136\n","I0419 19:24:26.079534 139902227502976 efficientnet_model.py:144] round_filter input=112 output=136\n","I0419 19:24:26.079735 139902227502976 efficientnet_model.py:144] round_filter input=192 output=232\n","I0419 19:24:26.516920 139902227502976 efficientnet_model.py:144] round_filter input=192 output=232\n","I0419 19:24:26.517096 139902227502976 efficientnet_model.py:144] round_filter input=320 output=384\n","I0419 19:24:26.670171 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=1536\n","I0419 19:24:26.697930 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.2, depth_coefficient=1.4, resolution=300, dropout_rate=0.3, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:26.760648 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b4\n","I0419 19:24:26.760801 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 224\n","I0419 19:24:26.760899 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 7\n","I0419 19:24:26.762465 139902227502976 efficientnet_model.py:144] round_filter input=32 output=48\n","I0419 19:24:26.777664 139902227502976 efficientnet_model.py:144] round_filter input=32 output=48\n","I0419 19:24:26.777775 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:26.892846 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:26.892997 139902227502976 efficientnet_model.py:144] round_filter input=24 output=32\n","I0419 19:24:27.180276 139902227502976 efficientnet_model.py:144] round_filter input=24 output=32\n","I0419 19:24:27.180456 139902227502976 efficientnet_model.py:144] round_filter input=40 output=56\n","I0419 19:24:27.470995 139902227502976 efficientnet_model.py:144] round_filter input=40 output=56\n","I0419 19:24:27.471164 139902227502976 efficientnet_model.py:144] round_filter input=80 output=112\n","I0419 19:24:27.916730 139902227502976 efficientnet_model.py:144] round_filter input=80 output=112\n","I0419 19:24:27.916913 139902227502976 efficientnet_model.py:144] round_filter input=112 output=160\n","I0419 19:24:28.382130 139902227502976 efficientnet_model.py:144] round_filter input=112 output=160\n","I0419 19:24:28.382309 139902227502976 efficientnet_model.py:144] round_filter input=192 output=272\n","I0419 19:24:28.972468 139902227502976 efficientnet_model.py:144] round_filter input=192 output=272\n","I0419 19:24:28.972642 139902227502976 efficientnet_model.py:144] round_filter input=320 output=448\n","I0419 19:24:29.112926 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=1792\n","I0419 19:24:29.140067 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.4, depth_coefficient=1.8, resolution=380, dropout_rate=0.4, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:29.408466 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b5\n","I0419 19:24:29.408641 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 288\n","I0419 19:24:29.408721 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 7\n","I0419 19:24:29.410293 139902227502976 efficientnet_model.py:144] round_filter input=32 output=48\n","I0419 19:24:29.425231 139902227502976 efficientnet_model.py:144] round_filter input=32 output=48\n","I0419 19:24:29.425360 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:29.607817 139902227502976 efficientnet_model.py:144] round_filter input=16 output=24\n","I0419 19:24:29.607978 139902227502976 efficientnet_model.py:144] round_filter input=24 output=40\n","I0419 19:24:29.976818 139902227502976 efficientnet_model.py:144] round_filter input=24 output=40\n","I0419 19:24:29.977003 139902227502976 efficientnet_model.py:144] round_filter input=40 output=64\n","I0419 19:24:30.337079 139902227502976 efficientnet_model.py:144] round_filter input=40 output=64\n","I0419 19:24:30.337251 139902227502976 efficientnet_model.py:144] round_filter input=80 output=128\n","I0419 19:24:30.854600 139902227502976 efficientnet_model.py:144] round_filter input=80 output=128\n","I0419 19:24:30.854773 139902227502976 efficientnet_model.py:144] round_filter input=112 output=176\n","I0419 19:24:31.387097 139902227502976 efficientnet_model.py:144] round_filter input=112 output=176\n","I0419 19:24:31.387285 139902227502976 efficientnet_model.py:144] round_filter input=192 output=304\n","I0419 19:24:32.065131 139902227502976 efficientnet_model.py:144] round_filter input=192 output=304\n","I0419 19:24:32.065306 139902227502976 efficientnet_model.py:144] round_filter input=320 output=512\n","I0419 19:24:32.287658 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=2048\n","I0419 19:24:32.314632 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.6, depth_coefficient=2.2, resolution=456, dropout_rate=0.4, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:32.404893 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b6\n","I0419 19:24:32.405044 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 384\n","I0419 19:24:32.405121 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 8\n","I0419 19:24:32.406714 139902227502976 efficientnet_model.py:144] round_filter input=32 output=56\n","I0419 19:24:32.421844 139902227502976 efficientnet_model.py:144] round_filter input=32 output=56\n","I0419 19:24:32.421967 139902227502976 efficientnet_model.py:144] round_filter input=16 output=32\n","I0419 19:24:32.591794 139902227502976 efficientnet_model.py:144] round_filter input=16 output=32\n","I0419 19:24:32.591958 139902227502976 efficientnet_model.py:144] round_filter input=24 output=40\n","I0419 19:24:33.040418 139902227502976 efficientnet_model.py:144] round_filter input=24 output=40\n","I0419 19:24:33.040628 139902227502976 efficientnet_model.py:144] round_filter input=40 output=72\n","I0419 19:24:33.487444 139902227502976 efficientnet_model.py:144] round_filter input=40 output=72\n","I0419 19:24:33.487617 139902227502976 efficientnet_model.py:144] round_filter input=80 output=144\n","I0419 19:24:34.072729 139902227502976 efficientnet_model.py:144] round_filter input=80 output=144\n","I0419 19:24:34.072910 139902227502976 efficientnet_model.py:144] round_filter input=112 output=200\n","I0419 19:24:34.936350 139902227502976 efficientnet_model.py:144] round_filter input=112 output=200\n","I0419 19:24:34.936538 139902227502976 efficientnet_model.py:144] round_filter input=192 output=344\n","I0419 19:24:35.734700 139902227502976 efficientnet_model.py:144] round_filter input=192 output=344\n","I0419 19:24:35.734876 139902227502976 efficientnet_model.py:144] round_filter input=320 output=576\n","I0419 19:24:35.947577 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=2304\n","I0419 19:24:35.979051 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=1.8, depth_coefficient=2.6, resolution=528, dropout_rate=0.5, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","I0419 19:24:36.078240 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:146] EfficientDet EfficientNet backbone version: efficientnet-b7\n","I0419 19:24:36.078395 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:147] EfficientDet BiFPN num filters: 384\n","I0419 19:24:36.078478 139902227502976 ssd_efficientnet_bifpn_feature_extractor.py:149] EfficientDet BiFPN num iterations: 8\n","I0419 19:24:36.080068 139902227502976 efficientnet_model.py:144] round_filter input=32 output=64\n","I0419 19:24:36.094435 139902227502976 efficientnet_model.py:144] round_filter input=32 output=64\n","I0419 19:24:36.094555 139902227502976 efficientnet_model.py:144] round_filter input=16 output=32\n","I0419 19:24:36.330050 139902227502976 efficientnet_model.py:144] round_filter input=16 output=32\n","I0419 19:24:36.330208 139902227502976 efficientnet_model.py:144] round_filter input=24 output=48\n","I0419 19:24:36.843202 139902227502976 efficientnet_model.py:144] round_filter input=24 output=48\n","I0419 19:24:36.843378 139902227502976 efficientnet_model.py:144] round_filter input=40 output=80\n","I0419 19:24:37.371205 139902227502976 efficientnet_model.py:144] round_filter input=40 output=80\n","I0419 19:24:37.371404 139902227502976 efficientnet_model.py:144] round_filter input=80 output=160\n","I0419 19:24:38.119790 139902227502976 efficientnet_model.py:144] round_filter input=80 output=160\n","I0419 19:24:38.119988 139902227502976 efficientnet_model.py:144] round_filter input=112 output=224\n","I0419 19:24:38.843605 139902227502976 efficientnet_model.py:144] round_filter input=112 output=224\n","I0419 19:24:38.843796 139902227502976 efficientnet_model.py:144] round_filter input=192 output=384\n","I0419 19:24:39.789391 139902227502976 efficientnet_model.py:144] round_filter input=192 output=384\n","I0419 19:24:39.789598 139902227502976 efficientnet_model.py:144] round_filter input=320 output=640\n","I0419 19:24:40.353087 139902227502976 efficientnet_model.py:144] round_filter input=1280 output=2560\n","I0419 19:24:40.386588 139902227502976 efficientnet_model.py:454] Building model efficientnet with params ModelConfig(width_coefficient=2.0, depth_coefficient=3.1, resolution=600, dropout_rate=0.5, blocks=(BlockConfig(input_filters=32, output_filters=16, kernel_size=3, num_repeat=1, expand_ratio=1, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=16, output_filters=24, kernel_size=3, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=24, output_filters=40, kernel_size=5, num_repeat=2, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=40, output_filters=80, kernel_size=3, num_repeat=3, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=80, output_filters=112, kernel_size=5, num_repeat=3, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=112, output_filters=192, kernel_size=5, num_repeat=4, expand_ratio=6, strides=(2, 2), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise'), BlockConfig(input_filters=192, output_filters=320, kernel_size=3, num_repeat=1, expand_ratio=6, strides=(1, 1), se_ratio=0.25, id_skip=True, fused_conv=False, conv_type='depthwise')), stem_base_filters=32, top_base_filters=1280, activation='simple_swish', batch_norm='default', bn_momentum=0.99, bn_epsilon=0.001, weight_decay=5e-06, drop_connect_rate=0.2, depth_divisor=8, min_depth=None, use_se=True, input_channels=3, num_classes=1000, model_name='efficientnet', rescale_input=False, data_format='channels_last', dtype='float32')\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_create_ssd_models_from_config): 24.01s\n","I0419 19:24:40.503293 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_create_ssd_models_from_config): 24.01s\n","[       OK ] ModelBuilderTF2Test.test_create_ssd_models_from_config\n","[ RUN      ] ModelBuilderTF2Test.test_invalid_faster_rcnn_batchnorm_update\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_invalid_faster_rcnn_batchnorm_update): 0.0s\n","I0419 19:24:40.510077 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_invalid_faster_rcnn_batchnorm_update): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_invalid_faster_rcnn_batchnorm_update\n","[ RUN      ] ModelBuilderTF2Test.test_invalid_first_stage_nms_iou_threshold\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_invalid_first_stage_nms_iou_threshold): 0.0s\n","I0419 19:24:40.511800 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_invalid_first_stage_nms_iou_threshold): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_invalid_first_stage_nms_iou_threshold\n","[ RUN      ] ModelBuilderTF2Test.test_invalid_model_config_proto\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_invalid_model_config_proto): 0.0s\n","I0419 19:24:40.512320 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_invalid_model_config_proto): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_invalid_model_config_proto\n","[ RUN      ] ModelBuilderTF2Test.test_invalid_second_stage_batch_size\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_invalid_second_stage_batch_size): 0.0s\n","I0419 19:24:40.513862 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_invalid_second_stage_batch_size): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_invalid_second_stage_batch_size\n","[ RUN      ] ModelBuilderTF2Test.test_session\n","[  SKIPPED ] ModelBuilderTF2Test.test_session\n","[ RUN      ] ModelBuilderTF2Test.test_unknown_faster_rcnn_feature_extractor\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_unknown_faster_rcnn_feature_extractor): 0.0s\n","I0419 19:24:40.515341 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_unknown_faster_rcnn_feature_extractor): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_unknown_faster_rcnn_feature_extractor\n","[ RUN      ] ModelBuilderTF2Test.test_unknown_meta_architecture\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_unknown_meta_architecture): 0.0s\n","I0419 19:24:40.515823 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_unknown_meta_architecture): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_unknown_meta_architecture\n","[ RUN      ] ModelBuilderTF2Test.test_unknown_ssd_feature_extractor\n","INFO:tensorflow:time(__main__.ModelBuilderTF2Test.test_unknown_ssd_feature_extractor): 0.0s\n","I0419 19:24:40.516811 139902227502976 test_util.py:2374] time(__main__.ModelBuilderTF2Test.test_unknown_ssd_feature_extractor): 0.0s\n","[       OK ] ModelBuilderTF2Test.test_unknown_ssd_feature_extractor\n","----------------------------------------------------------------------\n","Ran 24 tests in 31.980s\n","\n","OK (skipped=1)\n"]}],"source":["# Проверяем все ли установилось правильно\n","# Обычно для корректной работы необходимо доустановить некоторые библиотеки\n","# Но лучше использовать Google colab \n","\n","VERIFICATION_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'builders', 'model_builder_tf2_test.py')\n","\n","!python {VERIFICATION_SCRIPT}"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"kKa-8a_l1Ug-","executionInfo":{"status":"ok","timestamp":1650396283106,"user_tz":-180,"elapsed":14,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# Проверяем установку Object detection\n","import object_detection"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":685,"status":"ok","timestamp":1650386743381,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"csofht2npfDE","outputId":"e175bc69-ce39-4de4-c5e6-ba245fcf909c"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-04-19 16:45:41--  http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz\n","Resolving download.tensorflow.org (download.tensorflow.org)... 108.177.127.128, 2a00:1450:4013:c07::80\n","Connecting to download.tensorflow.org (download.tensorflow.org)|108.177.127.128|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 20518283 (20M) [application/x-tar]\n","Saving to: ‘ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz’\n","\n","ssd_mobilenet_v2_fp 100%[===================>]  19.57M  --.-KB/s    in 0.08s   \n","\n","2022-04-19 16:45:41 (234 MB/s) - ‘ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz’ saved [20518283/20518283]\n","\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/checkpoint/\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/checkpoint/ckpt-0.data-00000-of-00001\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/checkpoint/checkpoint\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/checkpoint/ckpt-0.index\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/pipeline.config\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model/\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model/saved_model.pb\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model/variables/\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model/variables/variables.data-00000-of-00001\n","ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model/variables/variables.index\n"]}],"source":["# Скачиваем модель и разархивируем её\n","if os.name =='posix':\n","    !wget {PRETRAINED_MODEL_URL}\n","    !mv {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}\n","    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}\n","if os.name == 'nt':\n","    wget.download(PRETRAINED_MODEL_URL)\n","    !move {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}\n","    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}"]},{"cell_type":"markdown","metadata":{"id":"M5KJTnkfpfDC"},"source":["## 2. Создаем метки"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"p1BVDWo7pfDC","executionInfo":{"status":"ok","timestamp":1650386743381,"user_tz":-180,"elapsed":3,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["labels = [{'name':'number', 'id':1}]\n","\n","with open(files['LABELMAP'], 'w') as f:\n","    for label in labels:\n","        f.write('item { \\n')\n","        f.write('\\tname:\\'{}\\'\\n'.format(label['name']))\n","        f.write('\\tid:{}\\n'.format(label['id']))\n","        f.write('}\\n')"]},{"cell_type":"markdown","metadata":{"id":"C88zyVELpfDC"},"source":["## 3. Преобразуем данные в читаемый формат для модели (TF records)"]},{"cell_type":"code","source":["import zipfile"],"metadata":{"id":"JQ4tqqns2qkr","executionInfo":{"status":"ok","timestamp":1650386743381,"user_tz":-180,"elapsed":2,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Извлечение тренировочной выборки\n","with zipfile.ZipFile(os.path.join(paths[\"IMAGE_PATH\"],'train','train.zip')) as filez:\n","  filez.extractall(os.path.join(paths[\"IMAGE_PATH\"],'train'))\n","# Извлечение тестовой выборки\n","with zipfile.ZipFile(os.path.join(paths[\"IMAGE_PATH\"],'test','test.zip')) as filez:\n","  filez.extractall(os.path.join(paths[\"IMAGE_PATH\"],'test'))"],"metadata":{"id":"WZwEFqnv2tYo","executionInfo":{"status":"ok","timestamp":1650395039270,"user_tz":-180,"elapsed":1084,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":707,"status":"ok","timestamp":1650386744606,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"KWpb_BVUpfDD","outputId":"979b0ada-b78a-4491-e9f3-8304dd534833"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Tensorflow/scripts'...\n","remote: Enumerating objects: 3, done.\u001b[K\n","remote: Counting objects: 100% (3/3), done.\u001b[K\n","remote: Compressing objects: 100% (2/2), done.\u001b[K\n","remote: Total 3 (delta 0), reused 1 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects: 100% (3/3), done.\n"]}],"source":["## Используем готовый рекомендуемый скрипт для преобразования формата\n","if not os.path.exists(files['TF_RECORD_SCRIPT']):\n","    !git clone https://github.com/nicknochnack/GenerateTFRecord {paths['SCRIPTS_PATH']}"]},{"cell_type":"code","execution_count":55,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6178,"status":"ok","timestamp":1650395066125,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"UPFToGZqpfDD","outputId":"098650b5-9dcc-4fc1-8cff-365ccd193972"},"outputs":[{"output_type":"stream","name":"stdout","text":["Successfully created the TFRecord file: Tensorflow/workspace/annotations/train.record\n","Successfully created the TFRecord file: Tensorflow/workspace/annotations/test.record\n"]}],"source":["!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'train')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'train.record')} \n","!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'test')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'test.record')} "]},{"cell_type":"markdown","metadata":{"id":"qT4QU7pLpfDE"},"source":["## 4. Скопируем модель в рабочую директорию"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"cOjuTFbwpfDF","executionInfo":{"status":"ok","timestamp":1650386751281,"user_tz":-180,"elapsed":568,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["if os.name =='posix':\n","    !cp {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}\n","if os.name == 'nt':\n","    !copy {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}"]},{"cell_type":"markdown","metadata":{"id":"Ga8gpNslpfDF"},"source":["## 5. Обновим конфигурационный файл для трансферного обучения\n","\n","Основное это указать карту меток и указать путь к каталогом с размечеными файлами в формате TFRecord"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"Z9hRrO_ppfDF","executionInfo":{"status":"ok","timestamp":1650386755999,"user_tz":-180,"elapsed":4720,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["import tensorflow as tf\n","from object_detection.utils import config_util\n","from object_detection.protos import pipeline_pb2\n","from google.protobuf import text_format"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"c2A0mn4ipfDF","executionInfo":{"status":"ok","timestamp":1650386756000,"user_tz":-180,"elapsed":18,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["config = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1650386756000,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"uQA13-afpfDF","outputId":"0f5c509f-ef94-4676-f11a-ebf364c71c65"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'eval_config': metrics_set: \"coco_detection_metrics\"\n"," use_moving_averages: false,\n"," 'eval_input_config': label_map_path: \"PATH_TO_BE_CONFIGURED\"\n"," shuffle: false\n"," num_epochs: 1\n"," tf_record_input_reader {\n","   input_path: \"PATH_TO_BE_CONFIGURED\"\n"," },\n"," 'eval_input_configs': [label_map_path: \"PATH_TO_BE_CONFIGURED\"\n"," shuffle: false\n"," num_epochs: 1\n"," tf_record_input_reader {\n","   input_path: \"PATH_TO_BE_CONFIGURED\"\n"," }\n"," ],\n"," 'model': ssd {\n","   num_classes: 90\n","   image_resizer {\n","     fixed_shape_resizer {\n","       height: 640\n","       width: 640\n","     }\n","   }\n","   feature_extractor {\n","     type: \"ssd_mobilenet_v2_fpn_keras\"\n","     depth_multiplier: 1.0\n","     min_depth: 16\n","     conv_hyperparams {\n","       regularizer {\n","         l2_regularizer {\n","           weight: 3.9999998989515007e-05\n","         }\n","       }\n","       initializer {\n","         random_normal_initializer {\n","           mean: 0.0\n","           stddev: 0.009999999776482582\n","         }\n","       }\n","       activation: RELU_6\n","       batch_norm {\n","         decay: 0.996999979019165\n","         scale: true\n","         epsilon: 0.0010000000474974513\n","       }\n","     }\n","     use_depthwise: true\n","     override_base_feature_extractor_hyperparams: true\n","     fpn {\n","       min_level: 3\n","       max_level: 7\n","       additional_layer_depth: 128\n","     }\n","   }\n","   box_coder {\n","     faster_rcnn_box_coder {\n","       y_scale: 10.0\n","       x_scale: 10.0\n","       height_scale: 5.0\n","       width_scale: 5.0\n","     }\n","   }\n","   matcher {\n","     argmax_matcher {\n","       matched_threshold: 0.5\n","       unmatched_threshold: 0.5\n","       ignore_thresholds: false\n","       negatives_lower_than_unmatched: true\n","       force_match_for_each_row: true\n","       use_matmul_gather: true\n","     }\n","   }\n","   similarity_calculator {\n","     iou_similarity {\n","     }\n","   }\n","   box_predictor {\n","     weight_shared_convolutional_box_predictor {\n","       conv_hyperparams {\n","         regularizer {\n","           l2_regularizer {\n","             weight: 3.9999998989515007e-05\n","           }\n","         }\n","         initializer {\n","           random_normal_initializer {\n","             mean: 0.0\n","             stddev: 0.009999999776482582\n","           }\n","         }\n","         activation: RELU_6\n","         batch_norm {\n","           decay: 0.996999979019165\n","           scale: true\n","           epsilon: 0.0010000000474974513\n","         }\n","       }\n","       depth: 128\n","       num_layers_before_predictor: 4\n","       kernel_size: 3\n","       class_prediction_bias_init: -4.599999904632568\n","       share_prediction_tower: true\n","       use_depthwise: true\n","     }\n","   }\n","   anchor_generator {\n","     multiscale_anchor_generator {\n","       min_level: 3\n","       max_level: 7\n","       anchor_scale: 4.0\n","       aspect_ratios: 1.0\n","       aspect_ratios: 2.0\n","       aspect_ratios: 0.5\n","       scales_per_octave: 2\n","     }\n","   }\n","   post_processing {\n","     batch_non_max_suppression {\n","       score_threshold: 9.99999993922529e-09\n","       iou_threshold: 0.6000000238418579\n","       max_detections_per_class: 100\n","       max_total_detections: 100\n","       use_static_shapes: false\n","     }\n","     score_converter: SIGMOID\n","   }\n","   normalize_loss_by_num_matches: true\n","   loss {\n","     localization_loss {\n","       weighted_smooth_l1 {\n","       }\n","     }\n","     classification_loss {\n","       weighted_sigmoid_focal {\n","         gamma: 2.0\n","         alpha: 0.25\n","       }\n","     }\n","     classification_weight: 1.0\n","     localization_weight: 1.0\n","   }\n","   encode_background_as_zeros: true\n","   normalize_loc_loss_by_codesize: true\n","   inplace_batchnorm_update: true\n","   freeze_batchnorm: false\n"," },\n"," 'train_config': batch_size: 128\n"," data_augmentation_options {\n","   random_horizontal_flip {\n","   }\n"," }\n"," data_augmentation_options {\n","   random_crop_image {\n","     min_object_covered: 0.0\n","     min_aspect_ratio: 0.75\n","     max_aspect_ratio: 3.0\n","     min_area: 0.75\n","     max_area: 1.0\n","     overlap_thresh: 0.0\n","   }\n"," }\n"," sync_replicas: true\n"," optimizer {\n","   momentum_optimizer {\n","     learning_rate {\n","       cosine_decay_learning_rate {\n","         learning_rate_base: 0.07999999821186066\n","         total_steps: 50000\n","         warmup_learning_rate: 0.026666000485420227\n","         warmup_steps: 1000\n","       }\n","     }\n","     momentum_optimizer_value: 0.8999999761581421\n","   }\n","   use_moving_average: false\n"," }\n"," fine_tune_checkpoint: \"PATH_TO_BE_CONFIGURED\"\n"," num_steps: 50000\n"," startup_delay_steps: 0.0\n"," replicas_to_aggregate: 8\n"," max_number_of_boxes: 100\n"," unpad_groundtruth_tensors: false\n"," fine_tune_checkpoint_type: \"classification\"\n"," fine_tune_checkpoint_version: V2,\n"," 'train_input_config': label_map_path: \"PATH_TO_BE_CONFIGURED\"\n"," tf_record_input_reader {\n","   input_path: \"PATH_TO_BE_CONFIGURED\"\n"," }}"]},"metadata":{},"execution_count":21}],"source":["config"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"9vK5lotDpfDF","executionInfo":{"status":"ok","timestamp":1650386756000,"user_tz":-180,"elapsed":13,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()\n","with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], \"r\") as f:                                                                                                                                                                                                                     \n","    proto_str = f.read()                                                                                                                                                                                                                                          \n","    text_format.Merge(proto_str, pipeline_config)  "]},{"cell_type":"code","execution_count":23,"metadata":{"id":"rP43Ph0JpfDG","executionInfo":{"status":"ok","timestamp":1650386756001,"user_tz":-180,"elapsed":14,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["pipeline_config.model.ssd.num_classes = len(labels)\n","pipeline_config.train_config.batch_size = 16\n","pipeline_config.train_config.fine_tune_checkpoint = os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'checkpoint', 'ckpt-0')\n","pipeline_config.train_config.max_number_of_boxes = 200\n","pipeline_config.train_config.fine_tune_checkpoint_type = \"detection\"\n","pipeline_config.train_input_reader.label_map_path= files['LABELMAP']\n","pipeline_config.train_input_reader.tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'train.record')]\n","pipeline_config.eval_input_reader[0].label_map_path = files['LABELMAP']\n","pipeline_config.eval_input_reader[0].tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'test.record')]"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1650386756001,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"},"user_tz":-180},"id":"oJvfgwWqpfDG","outputId":"c0f21920-2893-43a7-c8d7-58259e7713da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tensorflow/workspace/models/my_ssd_mobilenet/pipeline.config\n"]}],"source":["config_text = text_format.MessageToString(pipeline_config)                                                                                                                                                                                                        \n","with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], \"wb\") as f:  \n","    print(files['PIPELINE_CONFIG'])\n","    f.write(config_text)   "]},{"cell_type":"markdown","metadata":{"id":"Zr3ON7xMpfDG"},"source":["## 6. Обучение модели"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"B-Y2UQmQpfDG","executionInfo":{"status":"ok","timestamp":1650386756001,"user_tz":-180,"elapsed":10,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["TRAINING_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'model_main_tf2.py')"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"jMP2XDfQpfDH","executionInfo":{"status":"ok","timestamp":1650386756002,"user_tz":-180,"elapsed":10,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["command = \"python {} --model_dir={} --pipeline_config_path={} --num_train_steps=4000\".format(TRAINING_SCRIPT, paths['CHECKPOINT_PATH'],files['PIPELINE_CONFIG'])"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"i3ZsJR-qpfDH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"034ad2dc-b030-489a-8337-f50bd0f64697","executionInfo":{"status":"ok","timestamp":1650392878824,"user_tz":-180,"elapsed":5721465,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-04-19 16:52:46.974424: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n","I0419 16:52:47.023278 140652313937792 mirrored_strategy.py:374] Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n","INFO:tensorflow:Maybe overwriting train_steps: 4000\n","I0419 16:52:47.029167 140652313937792 config_util.py:552] Maybe overwriting train_steps: 4000\n","INFO:tensorflow:Maybe overwriting use_bfloat16: False\n","I0419 16:52:47.029448 140652313937792 config_util.py:552] Maybe overwriting use_bfloat16: False\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/object_detection/model_lib_v2.py:564: StrategyBase.experimental_distribute_datasets_from_function (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","rename to distribute_datasets_from_function\n","W0419 16:52:47.183690 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/object_detection/model_lib_v2.py:564: StrategyBase.experimental_distribute_datasets_from_function (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","rename to distribute_datasets_from_function\n","INFO:tensorflow:Reading unweighted datasets: ['Tensorflow/workspace/annotations/train.record']\n","I0419 16:52:47.197606 140652313937792 dataset_builder.py:162] Reading unweighted datasets: ['Tensorflow/workspace/annotations/train.record']\n","INFO:tensorflow:Reading record datasets for input file: ['Tensorflow/workspace/annotations/train.record']\n","I0419 16:52:47.197807 140652313937792 dataset_builder.py:79] Reading record datasets for input file: ['Tensorflow/workspace/annotations/train.record']\n","INFO:tensorflow:Number of filenames to read: 1\n","I0419 16:52:47.197931 140652313937792 dataset_builder.py:80] Number of filenames to read: 1\n","WARNING:tensorflow:num_readers has been reduced to 1 to match input file shards.\n","W0419 16:52:47.198016 140652313937792 dataset_builder.py:87] num_readers has been reduced to 1 to match input file shards.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/object_detection/builders/dataset_builder.py:104: parallel_interleave (from tensorflow.python.data.experimental.ops.interleave_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.data.Dataset.interleave(map_func, cycle_length, block_length, num_parallel_calls=tf.data.AUTOTUNE)` instead. If sloppy execution is desired, use `tf.data.Options.deterministic`.\n","W0419 16:52:47.209528 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/object_detection/builders/dataset_builder.py:104: parallel_interleave (from tensorflow.python.data.experimental.ops.interleave_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.data.Dataset.interleave(map_func, cycle_length, block_length, num_parallel_calls=tf.data.AUTOTUNE)` instead. If sloppy execution is desired, use `tf.data.Options.deterministic`.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/object_detection/builders/dataset_builder.py:236: DatasetV1.map_with_legacy_function (from tensorflow.python.data.ops.dataset_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.data.Dataset.map()\n","W0419 16:52:47.252880 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/object_detection/builders/dataset_builder.py:236: DatasetV1.map_with_legacy_function (from tensorflow.python.data.ops.dataset_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.data.Dataset.map()\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Create a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.\n","W0419 16:52:54.138640 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Create a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.\n","W0419 16:52:57.095642 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.cast` instead.\n","W0419 16:52:58.734188 140652313937792 deprecation.py:343] From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.cast` instead.\n","/usr/local/lib/python3.7/dist-packages/keras/backend.py:450: UserWarning: `tf.keras.backend.set_learning_phase` is deprecated and will be removed after 2020-10-11. To update it, simply pass a True/False value to the `training` argument of the `__call__` method of your layer or model.\n","  warnings.warn('`tf.keras.backend.set_learning_phase` is deprecated and '\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.558635 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.559881 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.562119 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.563050 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.565069 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.566042 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.568224 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.569130 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.571272 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","I0419 16:53:39.572166 140652313937792 cross_device_ops.py:618] Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/deprecation.py:616: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use fn_output_signature instead\n","W0419 16:53:40.166006 140647152154368 deprecation.py:547] From /usr/local/lib/python3.7/dist-packages/tensorflow/python/util/deprecation.py:616: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use fn_output_signature instead\n","INFO:tensorflow:Step 100 per-step time 1.880s\n","I0419 16:56:48.088268 140652313937792 model_lib_v2.py:707] Step 100 per-step time 1.880s\n","INFO:tensorflow:{'Loss/classification_loss': 0.17722487,\n"," 'Loss/localization_loss': 0.18186305,\n"," 'Loss/regularization_loss': 0.15148349,\n"," 'Loss/total_loss': 0.5105714,\n"," 'learning_rate': 0.0319994}\n","I0419 16:56:48.088723 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.17722487,\n"," 'Loss/localization_loss': 0.18186305,\n"," 'Loss/regularization_loss': 0.15148349,\n"," 'Loss/total_loss': 0.5105714,\n"," 'learning_rate': 0.0319994}\n","INFO:tensorflow:Step 200 per-step time 1.408s\n","I0419 16:59:08.613853 140652313937792 model_lib_v2.py:707] Step 200 per-step time 1.408s\n","INFO:tensorflow:{'Loss/classification_loss': 0.10689628,\n"," 'Loss/localization_loss': 0.058913484,\n"," 'Loss/regularization_loss': 0.15130094,\n"," 'Loss/total_loss': 0.31711072,\n"," 'learning_rate': 0.0373328}\n","I0419 16:59:08.614242 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.10689628,\n"," 'Loss/localization_loss': 0.058913484,\n"," 'Loss/regularization_loss': 0.15130094,\n"," 'Loss/total_loss': 0.31711072,\n"," 'learning_rate': 0.0373328}\n","INFO:tensorflow:Step 300 per-step time 1.395s\n","I0419 17:01:28.087163 140652313937792 model_lib_v2.py:707] Step 300 per-step time 1.395s\n","INFO:tensorflow:{'Loss/classification_loss': 0.07911728,\n"," 'Loss/localization_loss': 0.039512414,\n"," 'Loss/regularization_loss': 0.1510424,\n"," 'Loss/total_loss': 0.2696721,\n"," 'learning_rate': 0.0426662}\n","I0419 17:01:28.087552 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.07911728,\n"," 'Loss/localization_loss': 0.039512414,\n"," 'Loss/regularization_loss': 0.1510424,\n"," 'Loss/total_loss': 0.2696721,\n"," 'learning_rate': 0.0426662}\n","INFO:tensorflow:Step 400 per-step time 1.402s\n","I0419 17:03:48.265397 140652313937792 model_lib_v2.py:707] Step 400 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.089233615,\n"," 'Loss/localization_loss': 0.06601031,\n"," 'Loss/regularization_loss': 0.15072061,\n"," 'Loss/total_loss': 0.30596453,\n"," 'learning_rate': 0.047999598}\n","I0419 17:03:48.265770 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.089233615,\n"," 'Loss/localization_loss': 0.06601031,\n"," 'Loss/regularization_loss': 0.15072061,\n"," 'Loss/total_loss': 0.30596453,\n"," 'learning_rate': 0.047999598}\n","INFO:tensorflow:Step 500 per-step time 1.400s\n","I0419 17:06:08.261246 140652313937792 model_lib_v2.py:707] Step 500 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.114410445,\n"," 'Loss/localization_loss': 0.06761785,\n"," 'Loss/regularization_loss': 0.15033156,\n"," 'Loss/total_loss': 0.33235985,\n"," 'learning_rate': 0.053333}\n","I0419 17:06:08.261622 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.114410445,\n"," 'Loss/localization_loss': 0.06761785,\n"," 'Loss/regularization_loss': 0.15033156,\n"," 'Loss/total_loss': 0.33235985,\n"," 'learning_rate': 0.053333}\n","INFO:tensorflow:Step 600 per-step time 1.401s\n","I0419 17:08:28.315051 140652313937792 model_lib_v2.py:707] Step 600 per-step time 1.401s\n","INFO:tensorflow:{'Loss/classification_loss': 0.060382884,\n"," 'Loss/localization_loss': 0.022411153,\n"," 'Loss/regularization_loss': 0.14989804,\n"," 'Loss/total_loss': 0.23269208,\n"," 'learning_rate': 0.0586664}\n","I0419 17:08:28.315447 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.060382884,\n"," 'Loss/localization_loss': 0.022411153,\n"," 'Loss/regularization_loss': 0.14989804,\n"," 'Loss/total_loss': 0.23269208,\n"," 'learning_rate': 0.0586664}\n","INFO:tensorflow:Step 700 per-step time 1.402s\n","I0419 17:10:48.473305 140652313937792 model_lib_v2.py:707] Step 700 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.08140236,\n"," 'Loss/localization_loss': 0.039887063,\n"," 'Loss/regularization_loss': 0.14940472,\n"," 'Loss/total_loss': 0.27069414,\n"," 'learning_rate': 0.0639998}\n","I0419 17:10:48.473713 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.08140236,\n"," 'Loss/localization_loss': 0.039887063,\n"," 'Loss/regularization_loss': 0.14940472,\n"," 'Loss/total_loss': 0.27069414,\n"," 'learning_rate': 0.0639998}\n","INFO:tensorflow:Step 800 per-step time 1.397s\n","I0419 17:13:08.127654 140652313937792 model_lib_v2.py:707] Step 800 per-step time 1.397s\n","INFO:tensorflow:{'Loss/classification_loss': 0.089422375,\n"," 'Loss/localization_loss': 0.03835519,\n"," 'Loss/regularization_loss': 0.14886813,\n"," 'Loss/total_loss': 0.2766457,\n"," 'learning_rate': 0.069333196}\n","I0419 17:13:08.128017 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.089422375,\n"," 'Loss/localization_loss': 0.03835519,\n"," 'Loss/regularization_loss': 0.14886813,\n"," 'Loss/total_loss': 0.2766457,\n"," 'learning_rate': 0.069333196}\n","INFO:tensorflow:Step 900 per-step time 1.405s\n","I0419 17:15:28.636241 140652313937792 model_lib_v2.py:707] Step 900 per-step time 1.405s\n","INFO:tensorflow:{'Loss/classification_loss': 0.07906476,\n"," 'Loss/localization_loss': 0.040482294,\n"," 'Loss/regularization_loss': 0.14827782,\n"," 'Loss/total_loss': 0.2678249,\n"," 'learning_rate': 0.074666604}\n","I0419 17:15:28.636640 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.07906476,\n"," 'Loss/localization_loss': 0.040482294,\n"," 'Loss/regularization_loss': 0.14827782,\n"," 'Loss/total_loss': 0.2678249,\n"," 'learning_rate': 0.074666604}\n","INFO:tensorflow:Step 1000 per-step time 1.400s\n","I0419 17:17:48.615116 140652313937792 model_lib_v2.py:707] Step 1000 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.08568118,\n"," 'Loss/localization_loss': 0.054229587,\n"," 'Loss/regularization_loss': 0.14769667,\n"," 'Loss/total_loss': 0.28760743,\n"," 'learning_rate': 0.08}\n","I0419 17:17:48.615491 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.08568118,\n"," 'Loss/localization_loss': 0.054229587,\n"," 'Loss/regularization_loss': 0.14769667,\n"," 'Loss/total_loss': 0.28760743,\n"," 'learning_rate': 0.08}\n","INFO:tensorflow:Step 1100 per-step time 1.407s\n","I0419 17:20:09.283674 140652313937792 model_lib_v2.py:707] Step 1100 per-step time 1.407s\n","INFO:tensorflow:{'Loss/classification_loss': 0.08685924,\n"," 'Loss/localization_loss': 0.036413137,\n"," 'Loss/regularization_loss': 0.14715719,\n"," 'Loss/total_loss': 0.27042955,\n"," 'learning_rate': 0.07999918}\n","I0419 17:20:09.284040 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.08685924,\n"," 'Loss/localization_loss': 0.036413137,\n"," 'Loss/regularization_loss': 0.14715719,\n"," 'Loss/total_loss': 0.27042955,\n"," 'learning_rate': 0.07999918}\n","INFO:tensorflow:Step 1200 per-step time 1.398s\n","I0419 17:22:29.077788 140652313937792 model_lib_v2.py:707] Step 1200 per-step time 1.398s\n","INFO:tensorflow:{'Loss/classification_loss': 0.12366431,\n"," 'Loss/localization_loss': 0.0662514,\n"," 'Loss/regularization_loss': 0.14653863,\n"," 'Loss/total_loss': 0.33645433,\n"," 'learning_rate': 0.079996705}\n","I0419 17:22:29.078145 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.12366431,\n"," 'Loss/localization_loss': 0.0662514,\n"," 'Loss/regularization_loss': 0.14653863,\n"," 'Loss/total_loss': 0.33645433,\n"," 'learning_rate': 0.079996705}\n","INFO:tensorflow:Step 1300 per-step time 1.403s\n","I0419 17:24:49.354582 140652313937792 model_lib_v2.py:707] Step 1300 per-step time 1.403s\n","INFO:tensorflow:{'Loss/classification_loss': 0.074187785,\n"," 'Loss/localization_loss': 0.03364592,\n"," 'Loss/regularization_loss': 0.14585073,\n"," 'Loss/total_loss': 0.25368443,\n"," 'learning_rate': 0.0799926}\n","I0419 17:24:49.354936 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.074187785,\n"," 'Loss/localization_loss': 0.03364592,\n"," 'Loss/regularization_loss': 0.14585073,\n"," 'Loss/total_loss': 0.25368443,\n"," 'learning_rate': 0.0799926}\n","INFO:tensorflow:Step 1400 per-step time 1.409s\n","I0419 17:27:10.295288 140652313937792 model_lib_v2.py:707] Step 1400 per-step time 1.409s\n","INFO:tensorflow:{'Loss/classification_loss': 0.0444441,\n"," 'Loss/localization_loss': 0.011008044,\n"," 'Loss/regularization_loss': 0.14520924,\n"," 'Loss/total_loss': 0.20066138,\n"," 'learning_rate': 0.07998685}\n","I0419 17:27:10.295652 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.0444441,\n"," 'Loss/localization_loss': 0.011008044,\n"," 'Loss/regularization_loss': 0.14520924,\n"," 'Loss/total_loss': 0.20066138,\n"," 'learning_rate': 0.07998685}\n","INFO:tensorflow:Step 1500 per-step time 1.394s\n","I0419 17:29:29.650679 140652313937792 model_lib_v2.py:707] Step 1500 per-step time 1.394s\n","INFO:tensorflow:{'Loss/classification_loss': 0.061373282,\n"," 'Loss/localization_loss': 0.022927286,\n"," 'Loss/regularization_loss': 0.14448594,\n"," 'Loss/total_loss': 0.2287865,\n"," 'learning_rate': 0.07997945}\n","I0419 17:29:29.651076 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.061373282,\n"," 'Loss/localization_loss': 0.022927286,\n"," 'Loss/regularization_loss': 0.14448594,\n"," 'Loss/total_loss': 0.2287865,\n"," 'learning_rate': 0.07997945}\n","INFO:tensorflow:Step 1600 per-step time 1.399s\n","I0419 17:31:49.530190 140652313937792 model_lib_v2.py:707] Step 1600 per-step time 1.399s\n","INFO:tensorflow:{'Loss/classification_loss': 0.042414084,\n"," 'Loss/localization_loss': 0.016610999,\n"," 'Loss/regularization_loss': 0.14376682,\n"," 'Loss/total_loss': 0.2027919,\n"," 'learning_rate': 0.079970405}\n","I0419 17:31:49.530551 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.042414084,\n"," 'Loss/localization_loss': 0.016610999,\n"," 'Loss/regularization_loss': 0.14376682,\n"," 'Loss/total_loss': 0.2027919,\n"," 'learning_rate': 0.079970405}\n","INFO:tensorflow:Step 1700 per-step time 1.408s\n","I0419 17:34:10.314921 140652313937792 model_lib_v2.py:707] Step 1700 per-step time 1.408s\n","INFO:tensorflow:{'Loss/classification_loss': 0.06407114,\n"," 'Loss/localization_loss': 0.024607366,\n"," 'Loss/regularization_loss': 0.14306338,\n"," 'Loss/total_loss': 0.23174189,\n"," 'learning_rate': 0.07995972}\n","I0419 17:34:10.315269 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.06407114,\n"," 'Loss/localization_loss': 0.024607366,\n"," 'Loss/regularization_loss': 0.14306338,\n"," 'Loss/total_loss': 0.23174189,\n"," 'learning_rate': 0.07995972}\n","INFO:tensorflow:Step 1800 per-step time 1.404s\n","I0419 17:36:30.730595 140652313937792 model_lib_v2.py:707] Step 1800 per-step time 1.404s\n","INFO:tensorflow:{'Loss/classification_loss': 0.04872397,\n"," 'Loss/localization_loss': 0.013496223,\n"," 'Loss/regularization_loss': 0.1423039,\n"," 'Loss/total_loss': 0.2045241,\n"," 'learning_rate': 0.0799474}\n","I0419 17:36:30.730943 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.04872397,\n"," 'Loss/localization_loss': 0.013496223,\n"," 'Loss/regularization_loss': 0.1423039,\n"," 'Loss/total_loss': 0.2045241,\n"," 'learning_rate': 0.0799474}\n","INFO:tensorflow:Step 1900 per-step time 1.395s\n","I0419 17:38:50.227333 140652313937792 model_lib_v2.py:707] Step 1900 per-step time 1.395s\n","INFO:tensorflow:{'Loss/classification_loss': 0.054162264,\n"," 'Loss/localization_loss': 0.019542547,\n"," 'Loss/regularization_loss': 0.14155677,\n"," 'Loss/total_loss': 0.21526158,\n"," 'learning_rate': 0.07993342}\n","I0419 17:38:50.227699 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.054162264,\n"," 'Loss/localization_loss': 0.019542547,\n"," 'Loss/regularization_loss': 0.14155677,\n"," 'Loss/total_loss': 0.21526158,\n"," 'learning_rate': 0.07993342}\n","INFO:tensorflow:Step 2000 per-step time 1.398s\n","I0419 17:41:10.011767 140652313937792 model_lib_v2.py:707] Step 2000 per-step time 1.398s\n","INFO:tensorflow:{'Loss/classification_loss': 0.04678562,\n"," 'Loss/localization_loss': 0.01710818,\n"," 'Loss/regularization_loss': 0.14083637,\n"," 'Loss/total_loss': 0.20473017,\n"," 'learning_rate': 0.07991781}\n","I0419 17:41:10.012109 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.04678562,\n"," 'Loss/localization_loss': 0.01710818,\n"," 'Loss/regularization_loss': 0.14083637,\n"," 'Loss/total_loss': 0.20473017,\n"," 'learning_rate': 0.07991781}\n","INFO:tensorflow:Step 2100 per-step time 1.404s\n","I0419 17:43:30.367403 140652313937792 model_lib_v2.py:707] Step 2100 per-step time 1.404s\n","INFO:tensorflow:{'Loss/classification_loss': 0.056173652,\n"," 'Loss/localization_loss': 0.014550794,\n"," 'Loss/regularization_loss': 0.14016904,\n"," 'Loss/total_loss': 0.21089348,\n"," 'learning_rate': 0.07990056}\n","I0419 17:43:30.367805 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.056173652,\n"," 'Loss/localization_loss': 0.014550794,\n"," 'Loss/regularization_loss': 0.14016904,\n"," 'Loss/total_loss': 0.21089348,\n"," 'learning_rate': 0.07990056}\n","INFO:tensorflow:Step 2200 per-step time 1.401s\n","I0419 17:45:50.475619 140652313937792 model_lib_v2.py:707] Step 2200 per-step time 1.401s\n","INFO:tensorflow:{'Loss/classification_loss': 0.038698852,\n"," 'Loss/localization_loss': 0.021854276,\n"," 'Loss/regularization_loss': 0.13947736,\n"," 'Loss/total_loss': 0.20003048,\n"," 'learning_rate': 0.07988167}\n","I0419 17:45:50.475969 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.038698852,\n"," 'Loss/localization_loss': 0.021854276,\n"," 'Loss/regularization_loss': 0.13947736,\n"," 'Loss/total_loss': 0.20003048,\n"," 'learning_rate': 0.07988167}\n","INFO:tensorflow:Step 2300 per-step time 1.403s\n","I0419 17:48:10.733783 140652313937792 model_lib_v2.py:707] Step 2300 per-step time 1.403s\n","INFO:tensorflow:{'Loss/classification_loss': 0.05324562,\n"," 'Loss/localization_loss': 0.017512513,\n"," 'Loss/regularization_loss': 0.13875724,\n"," 'Loss/total_loss': 0.20951538,\n"," 'learning_rate': 0.07986114}\n","I0419 17:48:10.734117 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.05324562,\n"," 'Loss/localization_loss': 0.017512513,\n"," 'Loss/regularization_loss': 0.13875724,\n"," 'Loss/total_loss': 0.20951538,\n"," 'learning_rate': 0.07986114}\n","INFO:tensorflow:Step 2400 per-step time 1.400s\n","I0419 17:50:30.696132 140652313937792 model_lib_v2.py:707] Step 2400 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.049138173,\n"," 'Loss/localization_loss': 0.009681344,\n"," 'Loss/regularization_loss': 0.13802984,\n"," 'Loss/total_loss': 0.19684936,\n"," 'learning_rate': 0.07983897}\n","I0419 17:50:30.696561 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.049138173,\n"," 'Loss/localization_loss': 0.009681344,\n"," 'Loss/regularization_loss': 0.13802984,\n"," 'Loss/total_loss': 0.19684936,\n"," 'learning_rate': 0.07983897}\n","INFO:tensorflow:Step 2500 per-step time 1.395s\n","I0419 17:52:50.176337 140652313937792 model_lib_v2.py:707] Step 2500 per-step time 1.395s\n","INFO:tensorflow:{'Loss/classification_loss': 0.03620015,\n"," 'Loss/localization_loss': 0.018834777,\n"," 'Loss/regularization_loss': 0.13730885,\n"," 'Loss/total_loss': 0.19234377,\n"," 'learning_rate': 0.079815164}\n","I0419 17:52:50.176689 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.03620015,\n"," 'Loss/localization_loss': 0.018834777,\n"," 'Loss/regularization_loss': 0.13730885,\n"," 'Loss/total_loss': 0.19234377,\n"," 'learning_rate': 0.079815164}\n","INFO:tensorflow:Step 2600 per-step time 1.400s\n","I0419 17:55:10.135267 140652313937792 model_lib_v2.py:707] Step 2600 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.053825922,\n"," 'Loss/localization_loss': 0.014810067,\n"," 'Loss/regularization_loss': 0.13658482,\n"," 'Loss/total_loss': 0.2052208,\n"," 'learning_rate': 0.07978972}\n","I0419 17:55:10.135617 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.053825922,\n"," 'Loss/localization_loss': 0.014810067,\n"," 'Loss/regularization_loss': 0.13658482,\n"," 'Loss/total_loss': 0.2052208,\n"," 'learning_rate': 0.07978972}\n","INFO:tensorflow:Step 2700 per-step time 1.402s\n","I0419 17:57:30.294929 140652313937792 model_lib_v2.py:707] Step 2700 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.0742589,\n"," 'Loss/localization_loss': 0.025261128,\n"," 'Loss/regularization_loss': 0.13587134,\n"," 'Loss/total_loss': 0.23539136,\n"," 'learning_rate': 0.07976264}\n","I0419 17:57:30.295295 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.0742589,\n"," 'Loss/localization_loss': 0.025261128,\n"," 'Loss/regularization_loss': 0.13587134,\n"," 'Loss/total_loss': 0.23539136,\n"," 'learning_rate': 0.07976264}\n","INFO:tensorflow:Step 2800 per-step time 1.402s\n","I0419 17:59:50.517239 140652313937792 model_lib_v2.py:707] Step 2800 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.028787302,\n"," 'Loss/localization_loss': 0.010635255,\n"," 'Loss/regularization_loss': 0.13514802,\n"," 'Loss/total_loss': 0.17457058,\n"," 'learning_rate': 0.07973392}\n","I0419 17:59:50.517592 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.028787302,\n"," 'Loss/localization_loss': 0.010635255,\n"," 'Loss/regularization_loss': 0.13514802,\n"," 'Loss/total_loss': 0.17457058,\n"," 'learning_rate': 0.07973392}\n","INFO:tensorflow:Step 2900 per-step time 1.402s\n","I0419 18:02:10.727661 140652313937792 model_lib_v2.py:707] Step 2900 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.06218505,\n"," 'Loss/localization_loss': 0.012686167,\n"," 'Loss/regularization_loss': 0.13442072,\n"," 'Loss/total_loss': 0.20929193,\n"," 'learning_rate': 0.07970358}\n","I0419 18:02:10.728008 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.06218505,\n"," 'Loss/localization_loss': 0.012686167,\n"," 'Loss/regularization_loss': 0.13442072,\n"," 'Loss/total_loss': 0.20929193,\n"," 'learning_rate': 0.07970358}\n","INFO:tensorflow:Step 3000 per-step time 1.406s\n","I0419 18:04:31.338645 140652313937792 model_lib_v2.py:707] Step 3000 per-step time 1.406s\n","INFO:tensorflow:{'Loss/classification_loss': 0.06483371,\n"," 'Loss/localization_loss': 0.013770474,\n"," 'Loss/regularization_loss': 0.13369748,\n"," 'Loss/total_loss': 0.21230167,\n"," 'learning_rate': 0.0796716}\n","I0419 18:04:31.338975 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.06483371,\n"," 'Loss/localization_loss': 0.013770474,\n"," 'Loss/regularization_loss': 0.13369748,\n"," 'Loss/total_loss': 0.21230167,\n"," 'learning_rate': 0.0796716}\n","INFO:tensorflow:Step 3100 per-step time 1.406s\n","I0419 18:06:51.970595 140652313937792 model_lib_v2.py:707] Step 3100 per-step time 1.406s\n","INFO:tensorflow:{'Loss/classification_loss': 0.045926828,\n"," 'Loss/localization_loss': 0.012641983,\n"," 'Loss/regularization_loss': 0.1329878,\n"," 'Loss/total_loss': 0.1915566,\n"," 'learning_rate': 0.07963799}\n","I0419 18:06:51.970943 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.045926828,\n"," 'Loss/localization_loss': 0.012641983,\n"," 'Loss/regularization_loss': 0.1329878,\n"," 'Loss/total_loss': 0.1915566,\n"," 'learning_rate': 0.07963799}\n","INFO:tensorflow:Step 3200 per-step time 1.396s\n","I0419 18:09:11.612501 140652313937792 model_lib_v2.py:707] Step 3200 per-step time 1.396s\n","INFO:tensorflow:{'Loss/classification_loss': 0.04619157,\n"," 'Loss/localization_loss': 0.014457672,\n"," 'Loss/regularization_loss': 0.13228258,\n"," 'Loss/total_loss': 0.19293183,\n"," 'learning_rate': 0.07960275}\n","I0419 18:09:11.612840 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.04619157,\n"," 'Loss/localization_loss': 0.014457672,\n"," 'Loss/regularization_loss': 0.13228258,\n"," 'Loss/total_loss': 0.19293183,\n"," 'learning_rate': 0.07960275}\n","INFO:tensorflow:Step 3300 per-step time 1.399s\n","I0419 18:11:31.524257 140652313937792 model_lib_v2.py:707] Step 3300 per-step time 1.399s\n","INFO:tensorflow:{'Loss/classification_loss': 0.04804101,\n"," 'Loss/localization_loss': 0.011372313,\n"," 'Loss/regularization_loss': 0.13156329,\n"," 'Loss/total_loss': 0.19097662,\n"," 'learning_rate': 0.07956588}\n","I0419 18:11:31.524611 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.04804101,\n"," 'Loss/localization_loss': 0.011372313,\n"," 'Loss/regularization_loss': 0.13156329,\n"," 'Loss/total_loss': 0.19097662,\n"," 'learning_rate': 0.07956588}\n","INFO:tensorflow:Step 3400 per-step time 1.400s\n","I0419 18:13:51.568916 140652313937792 model_lib_v2.py:707] Step 3400 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.044224687,\n"," 'Loss/localization_loss': 0.012181109,\n"," 'Loss/regularization_loss': 0.13087715,\n"," 'Loss/total_loss': 0.18728295,\n"," 'learning_rate': 0.079527386}\n","I0419 18:13:51.569314 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.044224687,\n"," 'Loss/localization_loss': 0.012181109,\n"," 'Loss/regularization_loss': 0.13087715,\n"," 'Loss/total_loss': 0.18728295,\n"," 'learning_rate': 0.079527386}\n","INFO:tensorflow:Step 3500 per-step time 1.402s\n","I0419 18:16:11.753202 140652313937792 model_lib_v2.py:707] Step 3500 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.03305217,\n"," 'Loss/localization_loss': 0.008238935,\n"," 'Loss/regularization_loss': 0.13017361,\n"," 'Loss/total_loss': 0.17146471,\n"," 'learning_rate': 0.07948727}\n","I0419 18:16:11.753552 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.03305217,\n"," 'Loss/localization_loss': 0.008238935,\n"," 'Loss/regularization_loss': 0.13017361,\n"," 'Loss/total_loss': 0.17146471,\n"," 'learning_rate': 0.07948727}\n","INFO:tensorflow:Step 3600 per-step time 1.404s\n","I0419 18:18:32.165147 140652313937792 model_lib_v2.py:707] Step 3600 per-step time 1.404s\n","INFO:tensorflow:{'Loss/classification_loss': 0.029273568,\n"," 'Loss/localization_loss': 0.012921007,\n"," 'Loss/regularization_loss': 0.12949874,\n"," 'Loss/total_loss': 0.17169331,\n"," 'learning_rate': 0.079445526}\n","I0419 18:18:32.165497 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.029273568,\n"," 'Loss/localization_loss': 0.012921007,\n"," 'Loss/regularization_loss': 0.12949874,\n"," 'Loss/total_loss': 0.17169331,\n"," 'learning_rate': 0.079445526}\n","INFO:tensorflow:Step 3700 per-step time 1.402s\n","I0419 18:20:52.335510 140652313937792 model_lib_v2.py:707] Step 3700 per-step time 1.402s\n","INFO:tensorflow:{'Loss/classification_loss': 0.03642134,\n"," 'Loss/localization_loss': 0.017829897,\n"," 'Loss/regularization_loss': 0.12897064,\n"," 'Loss/total_loss': 0.18322188,\n"," 'learning_rate': 0.07940216}\n","I0419 18:20:52.335878 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.03642134,\n"," 'Loss/localization_loss': 0.017829897,\n"," 'Loss/regularization_loss': 0.12897064,\n"," 'Loss/total_loss': 0.18322188,\n"," 'learning_rate': 0.07940216}\n","INFO:tensorflow:Step 3800 per-step time 1.403s\n","I0419 18:23:12.660240 140652313937792 model_lib_v2.py:707] Step 3800 per-step time 1.403s\n","INFO:tensorflow:{'Loss/classification_loss': 0.05377534,\n"," 'Loss/localization_loss': 0.01760477,\n"," 'Loss/regularization_loss': 0.1282824,\n"," 'Loss/total_loss': 0.1996625,\n"," 'learning_rate': 0.079357184}\n","I0419 18:23:12.660615 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.05377534,\n"," 'Loss/localization_loss': 0.01760477,\n"," 'Loss/regularization_loss': 0.1282824,\n"," 'Loss/total_loss': 0.1996625,\n"," 'learning_rate': 0.079357184}\n","INFO:tensorflow:Step 3900 per-step time 1.395s\n","I0419 18:25:32.139577 140652313937792 model_lib_v2.py:707] Step 3900 per-step time 1.395s\n","INFO:tensorflow:{'Loss/classification_loss': 0.05265791,\n"," 'Loss/localization_loss': 0.016382625,\n"," 'Loss/regularization_loss': 0.12758811,\n"," 'Loss/total_loss': 0.19662865,\n"," 'learning_rate': 0.07931058}\n","I0419 18:25:32.139934 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.05265791,\n"," 'Loss/localization_loss': 0.016382625,\n"," 'Loss/regularization_loss': 0.12758811,\n"," 'Loss/total_loss': 0.19662865,\n"," 'learning_rate': 0.07931058}\n","INFO:tensorflow:Step 4000 per-step time 1.400s\n","I0419 18:27:52.185997 140652313937792 model_lib_v2.py:707] Step 4000 per-step time 1.400s\n","INFO:tensorflow:{'Loss/classification_loss': 0.042928506,\n"," 'Loss/localization_loss': 0.013316158,\n"," 'Loss/regularization_loss': 0.12692618,\n"," 'Loss/total_loss': 0.18317086,\n"," 'learning_rate': 0.07926236}\n","I0419 18:27:52.186360 140652313937792 model_lib_v2.py:708] {'Loss/classification_loss': 0.042928506,\n"," 'Loss/localization_loss': 0.013316158,\n"," 'Loss/regularization_loss': 0.12692618,\n"," 'Loss/total_loss': 0.18317086,\n"," 'learning_rate': 0.07926236}\n"]}],"source":["!{command}"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"32SvEYUw2mKP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650386908989,"user_tz":-180,"elapsed":152997,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"27b4bfcc-eb8c-4f38-97b0-7029c2ec6642"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: opencv-python-headless 4.5.5.64\n","Uninstalling opencv-python-headless-4.5.5.64:\n","  Would remove:\n","    /usr/local/lib/python3.7/dist-packages/cv2/*\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless-4.5.5.64.dist-info/*\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libavcodec-65fa80df.so.58.134.100\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libavformat-8ef5c7db.so.58.76.100\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libavutil-9c768859.so.56.70.100\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libbz2-a273e504.so.1.0.6\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libcrypto-09fe7800.so.1.1\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libgfortran-91cc3cb1.so.3.0.0\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libopenblas-r0-f650aae0.3.3.so\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libquadmath-96973f99.so.0.0.0\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libssl-b92f8066.so.1.1\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libswresample-99364a1c.so.3.9.100\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libswscale-e6451464.so.5.9.100\n","    /usr/local/lib/python3.7/dist-packages/opencv_python_headless.libs/libvpx-1016051d.so.7.0.0\n","  Would not remove (might be manually added):\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libQtCore-bbdab771.so.4.8.7\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libQtGui-903938cd.so.4.8.7\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libQtTest-1183da5d.so.4.8.7\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libavcodec-3cdd3bd4.so.58.62.100\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libavformat-69a63b50.so.58.35.100\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libavutil-8e8979a8.so.56.36.100\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libbz2-7225278b.so.1.0.3\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libcrypto-a25ff511.so.1.1\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libssl-fdf0b66c.so.1.1\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libswresample-c6b3bbb9.so.3.6.100\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libswscale-2d19f7d1.so.5.6.100\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libvpx-c887ea55.so.6.1.0\n","    /usr/local/lib/python3.7/dist-packages/cv2/.libs/libz-a147dcb0.so.1.2.3\n","    /usr/local/lib/python3.7/dist-packages/cv2/cv2.cpython-37m-x86_64-linux-gnu.so\n","Proceed (y/n)? y\n","  Successfully uninstalled opencv-python-headless-4.5.5.64\n"]}],"source":["!pip uninstall opencv-python-headless==4.5.5.62"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"nXb8N-Rv2uVR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650386917714,"user_tz":-180,"elapsed":5374,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"c77c1c46-73b8-47a9-a499-46306c43542b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting opencv-python-headless==4.1.2.30\n","  Downloading opencv_python_headless-4.1.2.30-cp37-cp37m-manylinux1_x86_64.whl (21.8 MB)\n","\u001b[K     |████████████████████████████████| 21.8 MB 1.5 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.14.5 in /usr/local/lib/python3.7/dist-packages (from opencv-python-headless==4.1.2.30) (1.21.6)\n","Installing collected packages: opencv-python-headless\n","Successfully installed opencv-python-headless-4.1.2.30\n"]}],"source":["!pip install opencv-python-headless==4.1.2.30"]},{"cell_type":"code","source":["import zipfile\n","with zipfile.ZipFile(os.path.join(paths[\"CHECKPOINT_PATH\"],\"archive.zip\"),\"w\") as zfile:\n","  for _, _, files_ckpt in os.walk(paths[\"CHECKPOINT_PATH\"]):\n","    for file_ckpt in files_ckpt:\n","      if \"zip\" not in file1:\n","        print(file1)\n","        zfile.write(os.path.join(paths[\"CHECKPOINT_PATH\"],file_ckpt), compress_type = zipfile.ZIP_DEFLATED)\n","      \n","    break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bklOW0anzM17","executionInfo":{"status":"ok","timestamp":1650394556574,"user_tz":-180,"elapsed":4950,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"7c0d399e-ef1f-48fa-ed88-699d2127b8ad"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["ckpt-4.index\n","ckpt-3.index\n","ckpt-2.data-00000-of-00001\n","ckpt-5.data-00000-of-00001\n","ckpt-1.index\n","ckpt-6.data-00000-of-00001\n","pipeline.config\n","ckpt-6.index\n","ckpt-3.data-00000-of-00001\n","ckpt-2.index\n","checkpoint\n","ckpt-4.data-00000-of-00001\n","ckpt-1.data-00000-of-00001\n","ckpt-5.index\n"]}]},{"cell_type":"markdown","metadata":{"id":"4_YRZu7npfDH"},"source":["## 7. Тестирование модели"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"80L7-fdPpfDH","executionInfo":{"status":"ok","timestamp":1650395084258,"user_tz":-180,"elapsed":330,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["command = \"python {} --model_dir={} --pipeline_config_path={} --checkpoint_dir={}\".format(TRAINING_SCRIPT, paths['CHECKPOINT_PATH'],files['PIPELINE_CONFIG'], paths['CHECKPOINT_PATH'])"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"lYsgEPx9pfDH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650395085578,"user_tz":-180,"elapsed":3,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"e1a1018d-3160-42dc-8390-3f5140619bbe"},"outputs":[{"output_type":"stream","name":"stdout","text":["python Tensorflow/models/research/object_detection/model_main_tf2.py --model_dir=Tensorflow/workspace/models/my_ssd_mobilenet --pipeline_config_path=Tensorflow/workspace/models/my_ssd_mobilenet/pipeline.config --checkpoint_dir=Tensorflow/workspace/models/my_ssd_mobilenet\n"]}],"source":["print(command)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lqTV2jGBpfDH"},"outputs":[],"source":["!{command}"]},{"cell_type":"markdown","metadata":{"id":"orvRk02UpfDI"},"source":["## 8. Загрузка обученой модели"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"8TYk4_oIpfDI","executionInfo":{"status":"ok","timestamp":1650396313108,"user_tz":-180,"elapsed":316,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["import os\n","import tensorflow as tf\n","from object_detection.utils import label_map_util\n","from object_detection.utils import visualization_utils as viz_utils\n","from object_detection.builders import model_builder\n","from object_detection.utils import config_util"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"tDnQg-cYpfDI","executionInfo":{"status":"ok","timestamp":1650396314387,"user_tz":-180,"elapsed":809,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["# Load pipeline config and build a detection model\n","configs = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])\n","detection_model = model_builder.build(model_config=configs['model'], is_training=False)\n","\n","# Restore checkpoint\n","ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)\n","ckpt.restore(os.path.join(paths['CHECKPOINT_PATH'], 'ckpt-5')).expect_partial()\n","\n","@tf.function\n","def detect_fn(image):\n","    image, shapes = detection_model.preprocess(image)\n","    prediction_dict = detection_model.predict(image, shapes)\n","    detections = detection_model.postprocess(prediction_dict, shapes)\n","    return detections"]},{"cell_type":"markdown","metadata":{"id":"0EmsmbBZpfDI"},"source":["# 9. Детекция номера"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"Y_MKiuZ4pfDI","executionInfo":{"status":"ok","timestamp":1650396317468,"user_tz":-180,"elapsed":375,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["import cv2 \n","import numpy as np\n","from matplotlib import pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"cBDbIhNapfDI","executionInfo":{"status":"ok","timestamp":1650396344714,"user_tz":-180,"elapsed":401,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["category_index = label_map_util.create_category_index_from_labelmap(files['LABELMAP'])"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"Lx3crOhOzITB","executionInfo":{"status":"ok","timestamp":1650396562224,"user_tz":-180,"elapsed":325,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}}},"outputs":[],"source":["IMAGE_PATH = os.path.join(paths['IMAGE_PATH'], 'test', '124.jpg')"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"Tpzn1SMry1yK","colab":{"base_uri":"https://localhost:8080/","height":269},"executionInfo":{"status":"ok","timestamp":1650396567319,"user_tz":-180,"elapsed":4623,"user":{"displayName":"Александр Евсеев","userId":"05178217882198927643"}},"outputId":"b0c53be3-0955-4fd5-f569-90958b957b59"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["img = cv2.imread(IMAGE_PATH)\n","image_np = np.array(img)\n","\n","input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)\n","detections = detect_fn(input_tensor)\n","\n","num_detections = int(detections.pop('num_detections'))\n","detections = {key: value[0, :num_detections].numpy()\n","              for key, value in detections.items()}\n","detections['num_detections'] = num_detections\n","\n","# detection_classes should be ints.\n","detections['detection_classes'] = detections['detection_classes'].astype(np.int64)\n","\n","label_id_offset = 1\n","image_np_with_detections = image_np.copy()\n","\n","viz_utils.visualize_boxes_and_labels_on_image_array(\n","            image_np_with_detections,\n","            detections['detection_boxes'],\n","            detections['detection_classes']+label_id_offset,\n","            detections['detection_scores'],\n","            category_index,\n","            use_normalized_coordinates=True,\n","            max_boxes_to_draw=5,\n","            min_score_thresh=.8,\n","            agnostic_mode=False)\n","\n","plt.imshow(cv2.cvtColor(image_np_with_detections, cv2.COLOR_BGR2RGB))\n","plt.show()"]},{"cell_type":"code","source":[""],"metadata":{"id":"Ta3JUiQmTQDf"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"name":"Training and Detection.ipynb_","provenance":[{"file_id":"1B07_zMnlmwotcE8Kam2pIZ8sIdlFpPll","timestamp":1650314803740}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}